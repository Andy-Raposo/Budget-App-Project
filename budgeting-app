class Category:

    def __init__(self, category):
        self.category = category
        self.ledger = []


    def __str__(self):
        len_middle_1 = 30 - len(self.category)
        len_left_1 = len_middle_1 // 2
        len_right_1 = len_middle_1 - len_left_1
        left_1 = len_left_1 * '*'
        right_1 = len_right_1 * '*'
        middle_1 = self.category
        title = left_1 + middle_1 + right_1
        
        outcome = ''
        for item in self.ledger: 
            description = item['description'][:23]
            left = description + (' ' * (23 - len(description)))
            amount = f"{item['amount']:.2f}"
            right = amount.rjust(7)
            outcome += left + right + '\n'

        total = f"Total: {self.get_balance():.2f}"
        return title + '\n' + outcome + total


    def deposit(self, amount, description=""):
        self.ledger.append({'amount': amount, 'description': description})
    

    def withdraw(self, amount, description=""):
        if self.check_funds(amount):
            self.ledger.append({'amount': -amount, 'description': description})
            return True
        
        else:
            print('Withdrawal impossible: Not enough funds available.')
            return False


    def get_balance(self):
        return sum(item['amount'] for item in self.ledger)


    def transfer(self, amount, category):
        if self.check_funds(amount):
            self.ledger.append({'amount': -amount, 'description': f'Transfer to {category.category}'})
            category.ledger.append({'amount': amount, 'description': f'Transfer from {self.category}'})
            return True
        
        else:
            print('Transfer impossible: Not enough funds available.')
            return False
    

    def check_funds(self, amount):
        if amount > self.get_balance():
            return False
        return True
    

    def _transfer(self, amount, category):
        destination_ledger = category.ledger
        source_ledger = self.ledger
        if amount > self.get_balance():
            return False
        return True
    
food = Category("Food")
clothing = Category("Clothing")


def create_spend_chart(categories):
    total_spent = 0
    category_spending = []

    for category in categories:
        spent = 0
        for item in category.ledger:
            if item['amount'] < 0:
                spent += -item['amount']
        category_spending.append({"name": category.category, "spent": spent})
        total_spent += spent

    for entry in category_spending:
        percentage = (entry['spent'] / total_spent) * 100
        entry['percentage'] = int(percentage // 10) * 10

    # Step 3: Build the bar chart string
    chart = "Percentage spent by category\n"
    for i in range(100, -1, -10):
        chart += str(i).rjust(3) + "|"
        for entry in category_spending:
            if entry['percentage'] >= i:
                chart += " o "
            else:
                chart += "   "
        chart += " \n"

    # Step 4: Add the horizontal line
    chart += "    " + "-" * (len(categories) * 3 + 1) + "\n"

    # Step 5: Add the vertical category names
    max_len = max(len(entry["name"]) for entry in category_spending)
    for i in range(max_len):
        line = "     "
        for entry in category_spending:
            if i < len(entry["name"]):
                line += entry["name"][i] + "  "
            else:
                line += "   "
        chart += line.rstrip() + "\n"

    return chart.rstrip('\n')
